# The following iterative sequence is defined for the set of positive integers:

# n → n/2 (n is even)
# n → 3n + 1 (n is odd)

# Using the rule above and starting with 13, we generate the following sequence:

# 13 → 40 → 20 → 10 → 5 → 16 → 8 → 4 → 2 → 1

# It can be seen that this sequence (starting at 13 and finishing at 1) contains 10 terms.
# Although it has not been proved yet (Collatz Problem), it is thought that all starting
# numbers finish at 1.

# Which starting number, under one million, produces the longest chain?

# NOTE: Once the chain starts the terms are allowed to go above one million.

def collatz_sequence_length(integer)
  length = 0
  num = integer
  until num == 1
    num = num % 2 == 0 ? num / 2 : num * 3 + 1
    length += 1
  end
  length + 1
end

max_length = 0
max_number = 0

(1..999_999).each do |num|
  if collatz_sequence_length(num) > max_length
    max_length = collatz_sequence_length(num)
    max_number = num
  end
end

solution = max_number

p solution

# => 837799

# This takes 5-10 seconds to run. I can refactor it for performance by starting at
# 999,999 and working down, eliminating numbers generated by the sequence.